% vi: noexpandtab:tabstop=4:ft=gprolog
% Copyright (c) 2023 Sergey Sikorskiy, released under the GNU GPLv2 license.

% Installing Void on a ZFS Root - https://docs.voidlinux.org/installation/guides/zfs.html
% https://openzfs.github.io/openzfs-docs/man/master/8/zpool.8.html#ENVIRONMENT_VARIABLES

uses_zfs(TL) :-
	memberchk(fs5_multi(zfs, _Label, _DL, _PTL, _CK, _B, _E), TL),
	true.

uses_encr_zfs(TL) :-
	memberchk(fs5_multi(zfs, _Label, _DL, _PTL, _CK, _B, true), TL),
	true.

% Do not mount the newly created file system.
zfs_pool_cmd(MP, _DS, _AL, [zfs, create, '-u', o(o, mountpoint=MP)]).
zfs_pool_cmd(_MP, _DS, AL, OL) :-
	findall(o(o, A), member(A, AL), OL).
zfs_pool_cmd(_MP, DS, _AL, [concat(zroot, DS)]).

zfs_mkfs_multi(PTL) :-
	forall(member(dataset(DS, MP, AL), PTL), (findall(C, (zfs_pool_cmd(MP, DS, AL, CL), member(C, CL)), CMD), os_shell2(CMD))),
	true.

zfs_install(TL, _RD) :-
	uses_zfs(TL),
	% os_call2([zgenhostid, '-f']), % Void won't boot with hostid generated by zgenhostid.
	lx_gen_hostid(''),
	!.
zfs_install(_TL, _).

zfs_passphrase(PASS, RD) :-
	atom_concat(RD, '/etc/zfs/zroot.key', FN),
	% FN = '/etc/zfs/zroot.key',
	open(FN, write, S),
	write(S, PASS),
	close(S),
	os_call2([chmod, '000', FN]),
	true.

zfs_zpool_destroy_all :-
	zpool_list(L),
	member(zp(PN,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_A10,_A11), L),
	% tui_progressbox_safe([zpool, export, '-f', PN, '2>&1'], '', [title(' exporting zpool '), sz([6, 40])]),
	tui_progressbox_safe([zpool, destroy, '-f', PN, '2>&1'], '', [title(' destroying zpool '), sz([6, 40])]),
	fail.
zfs_zpool_destroy_all.

zfs_pool_attrs(B, E, TL) -->
	zfs_pool_base,
	zfs_pool_props,
	zfs_pool_props(B),
	zfs_pool_feats,
	zfs_pool_feats(B),
	zfs_pool_attrs_encr(E, TL),
	zfs_pool_attrs_rest.

zfs_pool_base --> [
	  zpool
	, create
	, o(f)
	].

zfs_pool_props --> [
	  o(o, ashift=12)
	, o(o, autotrim=on)
	% , o(o, compatibility='openzfs-2.1-linux')
	].

zfs_pool_props(grub2) --> [
	  o(o, compatibility=grub2)
	].
zfs_pool_props(_) --> [].

zfs_pool_feats --> [
	  o('O', compression=lz4)
	, o('O', acltype=posixacl)
	, o('O', xattr=sa) % vastly improves the performance of extended attributes
	, o('O', relatime=on) % is a middle ground between classic POSIX atime behavior (with its significant performance impact) and atime=off (which provides the best performance by completely disabling atime updates).
	, o('O', normalization=formD) % eliminates some corner cases relating to UTF-8 filename normalization
	].

zfs_pool_feats(grub2) --> [].
zfs_pool_feats(_) --> [
	  o('O', dnodesize=auto)
	].

zfs_pool_attrs_encr(true, TL) --> [
	  o('O', encryption=on) % ZFS native encryption now defaults to aes-256-gcm.
	, o('O', keyformat=passphrase)
	],
	zfs_pool_attrs_encr_keylocation(TL).
zfs_pool_attrs_encr(false, _TL) --> [].

zfs_pool_attrs_encr_keylocation(TL) -->
	{ has_boot_part(TL), ! },
	[ o('O', keylocation=prompt) ].
zfs_pool_attrs_encr_keylocation(_TL) -->
	[ o('O', keylocation='file:///etc/zfs/zroot.key') ].

zfs_pool_attrs_rest --> [
	  o(m, none)
	, zroot
	].

zfs_make_zpool_create_cmd(TL, DL, B, E, OL) :-
	findall(PID, (member(PD, DL), (atom_concat('/dev/mapper', _, PD) -> PID = PD; lx_get_dev_disk_id(PD, PID))), PIDL),
	phrase(zfs_pool_attrs(B, E, TL), OL, [PIDL, '2>&1']),
	% tui_msgbox2(OL),
	true.

zfs_zpool_export_import(RD) :-
	% export and re-import the pool with a temporary, alternate root path
	PN = zroot,
	% os_shell2([zpool, export, PN]),
	format_to_atom(ETitle, ' exporting zpool ~w ', [PN]),
	tui_progressbox_safe([zpool, export, PN, '2>&1'], '', [title(ETitle), sz([6, 40])]),
	% os_shell2([zpool, import, '-N', o('R', RD), PN]),
	format_to_atom(ITitle, ' importing zpool ~w ', [PN]),
	tui_progressbox_safe([zpool, import, '-N', o('R', RD), PN, '2>&1'], '', [title(ITitle), sz([8, 60])]),
	true.

zfs_mkfs(TL, PTL) :-
	zfs_mkfs_multi(PTL),
	( \+ has_boot_part(TL)
	; os_call2([zpool, set, bootfs='zroot/ROOT/void', zroot])
	), !,
	true.

% No native encryption.
zfs_zpool_create(Title, TL, DL, PTL, B, false, RD) :- !,
	zfs_make_zpool_create_cmd(TL, DL, B, false, OL),

	tui_progressbox_safe(OL, '', [title(Title), sz([12, 80])]),

	zfs_zpool_export_import(RD),
	zfs_mkfs(TL, PTL),
	!.
zfs_zpool_create(Title, TL, DL, PTL, B, true, RD) :- !,
	inst_setting_tmp(passwd('$_zfs_$'), PSWD),
	( has_boot_part(TL)
	; zfs_passphrase(PSWD, '')
	), !,

	zfs_make_zpool_create_cmd(TL, DL, B, true, OL),

	tui_infobox(Title, [sz([4, 40])]),
	os_scmdl(OL, CA),
	popen(CA, write, WS),
	write(WS, PSWD), % no nl(WS) should be here.
	close(WS),

	zfs_zpool_export_import(RD),
	zfs_load_key(PSWD),
	zfs_mkfs(TL, PTL),
	!.

zfs_export_pool_rd(RD) :-
	zpool_list(L),
	memberchk(zp(PN,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_A10,RD), L),
	% os_call2_rc([zfs, unmount, '-f', '-a'], _),
	format_to_atom(Title, ' exporting zpool ~w ', [PN]),
	tui_progressbox_safe([zpool, export, '-f', PN, '2>&1'], '', [title(Title), sz([6, 40])]),
	true.

zfs_destroy_pool_rd(RD) :-
	zpool_list(L),
	memberchk(zp(PN,_A2,_A3,_A4,_A5,_A6,_A7,_A8,_A9,_A10,RD), L),
	% tui_progressbox_safe([zpool, export, '-f', PN, '2>&1'], '', [title(' exporting zpool '), sz([6, 40])]),
	format_to_atom(Title, ' destroying zpool ~w ', [PN]),
	tui_progressbox_safe([zpool, destroy, '-f', PN, '2>&1'], '', [title(Title), sz([6, 40])]),
	true.

zfs_mount_muli(RD) :-
	% Mount the ZFS hierarchy
	os_call2([zfs, mount, 'zroot/ROOT/void']),
	os_call2([zfs, mount, '-a']),
	% Update device symlinks
	os_call2([udevadm, trigger]),

	% record the current pool configuration in a cache file that Void will use to avoid walking the entire device hierarchy to identify importable pools.
	os_mkdir_p(RD + '/etc/zfs'),
	os_call2([zpool, set, cachefile=concat(RD, '/etc/zfs/zpool.cache'), zroot]),
	true.

zfs_setup_encr(RD) :-
	% inst_setting_tmp(passwd('$_zfs_$'), PSWD),
	% zfs_passphrase(PSWD, RD),
	FN = '/etc/zfs/zroot.key',
	os_call2([mv, FN, RD + FN]),
	true.

